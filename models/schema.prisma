
datasource db {
    provider = "postgresql"
    url = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Session {
    id          String  @id
    sid         String  @unique
    data        String
    expiresAt   DateTime
}

model User {
    id              String            @id @default(uuid())
    firstName       String
    lastName        String
    userName        String            @unique
    email           String            @unique
    password        String
    role            Role              @default(USER)
    isActive        Boolean
    jobTitle        String
    position        Positon           @relation(fields: [positionId], references: [id])
    positionId      String
    city            String
    imageUrl        String
    linkedIn        String
    github          String
    post            Post[]
    savedPost       SavedPost[]
    comment         Comment[]
    reportedContent ReportedContent[]
    log             Log[]
    likes           Likes[]
}

model Post {
    id            String            @id @default(uuid())
    user          User              @relation(fields: [userId], references: [id])
    userId        String            @unique
    companyName   String
    city          String
    jobTitle      String
    position      String
    jobAdUrl      String
    createdDate   DateTime          @default(now())
    updatedDate   DateTime          @updatedAt
    description   String
    status        Status            @default(DRAFT)
    category      Category
    postTags      PostTag[]
    report        ReportedContent[]
    SavedPost     SavedPost[]
    targetPost    Comment[]         @relation("targetPost")
    targetComment Comment[]         @relation("targetComment")
    likes         Likes[]
}

model PostTag {
    id     String @id @default(uuid())
    post   Post   @relation(fields: [postId], references: [id])
    postId String
    tag    Tag    @relation(fields: [tagId], references: [id])
    tagId  String
}

model SavedPost {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String
    post   Post   @relation(fields: [postId], references: [id])
    postId String
}

model Likes {
    id          String @id @default(uuid())
    likedUser   User   @relation(fields: [likedUserId], references: [id])
    likedUserId String
    likedPost   Post   @relation(fields: [likedPostId], references: [id])
    likedPostId String
}

model Tag {
    id      String    @id @default(uuid())
    name    String
    postTag PostTag[]
}

model Comment {
    id              String            @id @default(uuid())
    user            User              @relation(fields: [userId], references: [id])
    userId          String
    targetPost      Post?             @relation("targetPost", fields: [targetPostId], references: [id])
    targetPostId    String?
    targetCommant   Post?             @relation("targetComment", fields: [targetCommentId], references: [id])
    targetCommentId String?
    type            CommentType
    content         String
    createdDate     DateTime          @default(now())
    updatedDate     DateTime?
    reportedContent ReportedContent[]
}

model ReportedContent {
    id                String      @id @default(uuid())
    reportedUser      User        @relation(fields: [reportedUserId], references: [id])
    reportedUserId    String
    reportedPost      Post?       @relation(fields: [repostedPostId], references: [id])
    repostedPostId    String?
    type              CommentType
    reportedComment   Comment?    @relation(fields: [reportedCommentId], references: [id])
    reportedCommentId String?
    createdDate       DateTime    @default(now())
    updatedDate       DateTime?
    note              String
}

model Log {
    id        String   @id @default(uuid())
    ip        String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    role      Role
    timestamp DateTime @default(now())
    method    String
    url       String
}

model Positon {
    id            String @id @default(uuid())
    positionTitle String
    User          User[]
}

enum CommentType {
    TYPE_COMENT
    TYPE_POST
}

enum Category {
    LEARN
    INTERVIEW
    PROJECT
    GENERAL
}

enum Status {
    PUBLISHED
    DRAFT
}

enum Role {
    USER
    ADMIN
}
