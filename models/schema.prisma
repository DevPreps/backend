datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model User {
    id         String            @id @default(uuid())
    firstName  String?
    lastName   String?
    userName   String            @unique
    email      String            @unique
    password   String
    role       Role              @default(USER)
    isActive   Boolean?
    jobTitle   String?
    position   Positon?          @relation(fields: [positionId], references: [id])
    positionId String?
    city       String?
    imageUrl   String?
    linkedIn   String?
    github     String?
    posts      Post[]
    savedPosts SavedPosts[]
    comments   Comments[]
    logEntries Log[]
    likes      Likes[]
    reported   ReportedContent[] @relation("reporter")
    moderated  ReportedContent[] @relation("moderator")
}

model Post {
    id              String            @id @default(uuid())
    user            User              @relation(fields: [userId], references: [id])
    userId          String
    title           String
    companyName     String?
    city            String?
    jobTitle        String?
    position        String?
    jobAdUrl        String?
    content         String
    createdDate     DateTime          @default(now())
    updatedDate     DateTime          @updatedAt
    status          Status            @default(DRAFT)
    category        Category
    postTags        PostTag[]
    savedBy         SavedPosts[]
    comments        Comments[]        @relation("targetPost")
    targetComment   Comments[]        @relation("targetComment") // Matches field to prevent errors but will always be empty
    likes           Likes[]
    reports         ReportedContent[]
}

model PostTag {
    id     String @id @default(uuid())
    post   Post  @relation(fields: [postId], references: [id])
    postId String
    tag    Tag    @relation(fields: [tagId], references: [id])
    tagId  String
}

model SavedPosts {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String
    post   Post  @relation(fields: [postId], references: [id])
    postId String
}

model Likes {
    id          String @id @default(uuid())
    likedUser   User   @relation(fields: [likedUserId], references: [id])
    likedUserId String
    likedPost   Post  @relation(fields: [likedPostId], references: [id])
    likedPostId String
}

model Tag {
    id       String    @id @default(uuid())
    name     String    @unique
    postTags PostTag[]
}

model Comments {
    id              String            @id @default(uuid())
    user            User              @relation(fields: [userId], references: [id])
    userId          String
    targetPost      Post?            @relation("targetPost", fields: [targetPostId], references: [id])
    targetPostId    String?
    targetComment   Post?            @relation("targetComment", fields: [targetCommentId], references: [id])
    targetCommentId String?
    type            CommentType
    content         String
    createdDate     DateTime          @default(now())
    updatedDate     DateTime          @updatedAt
    reports         ReportedContent[]
}

model ReportedContent {
    id                String      @id @default(uuid())
    reporter          User        @relation("reporter", fields: [reporterId], references: [id])
    reporterId        String
    reportedPost      Post?      @relation(fields: [repostedPostId], references: [id])
    repostedPostId    String?
    type              CommentType
    reportedComment   Comments?   @relation(fields: [reportedCommentId], references: [id])
    reportedCommentId String?
    createdDate       DateTime    @default(now())
    updatedDate       DateTime    @updatedAt
    notes             String?
    isResolved        Boolean     @default(false)
    moderator         User?       @relation("moderator", fields: [moderatorId], references: [id])
    moderatorId       String?
    moderatorComment  String?
}

model Log {
    id        String   @id @default(uuid())
    ip        String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    role      Role
    timestamp DateTime @default(now())
    method    String
    path      String
}

model Positon {
    id            String @id @default(uuid())
    positionTitle String
    User          User[]
}

enum CommentType {
    TYPE_COMMENT
    TYPE_POST
}

enum Category {
    LEARN
    INTERVIEW
    PROJECT
    GENERAL
}

enum Status {
    PUBLISHED
    DRAFT
}

enum Role {
    USER
    ADMIN
}
